---

- hosts: challenge1_all_servers
  gather_facts: false

## NOTE: Throttling to '1' because there seems to be a race condition in the proxmox_kvm module
## and it tries to use the same vmid for every VM when called in quick succession.
## Doesn't really matter though because proxmox can only clone 1 VM at a time from a given template.
  tasks:
    - name: Deploy All Challenge1 VMs
      include_role:
        name: proxmox_vm
        apply:
          delegate_to: "{{ proxmox_api_host }}"
          throttle: 1

- hosts: challenge1_all_servers
  gather_facts: false

  tasks:
    - name: Wait for ssh port to be available on new servers
      wait_for:
        port: 22
        delay: 2
      delegate_to: localhost
      become: false

# Make sure the ansible user exists and has our ssh key
- hosts: challenge1_all_servers
  gather_facts: false
  remote_user: root
  
  tasks:
    - name: Add ansible group to Challenge1 VMs
      ansible.builtin.group:
        name: ansible
        state: present

    - name: Add ansible user to Challenge1 VMs
      ansible.builtin.user:
        name: ansible
        group: ansible
        password: "!!"
        comment: Ansible user
        createhome: true
        shell: /usr/bin/bash
        state: present

    # NOTE: Though it's a public ssh key, this does give access to 
    # hosts so there's probably a more secure way to do this. 
    - name: Add current user's SSH key to ansible user authorized_keys on Challenge1 VMs
      ansible.posix.authorized_key:
        user: ansible
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"

    - name: Enable ansible user to use sudo without a password on Challenge1 VMs
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^ansible ALL='
        line: 'ansible ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

# configure app servers
- hosts: challenge1_app_servers
  gather_facts: true
  tasks:
    - name: Configure Challenge1 App VMs
      include_role:
        name: challenge1_app

# Configure proxy servers
- hosts: challenge1_proxy_servers
  gather_facts: true
  tasks:
    - name: Configure Challenge1 proxy VMs
      include_role:
        name: haproxy

# Output the URL of the front-end at the end of the run
- hosts: challenge1_proxy_servers
  become: false
  tasks:
    - name: Write Challenge1 front-end URL output to file
      local_action: copy content="New app can be accessed at http://{{ inventory_hostname }}\n" dest=/tmp/challenge1_app_info.txt

    - name: Print the new Challenge1 front-end URL 
      ansible.builtin.debug:
        msg: 
          - "Challenge1 app can be accessed at http://{{ inventory_hostname }}"
          - "You can also find this information in /tmp/challenge1_app_info.txt"
